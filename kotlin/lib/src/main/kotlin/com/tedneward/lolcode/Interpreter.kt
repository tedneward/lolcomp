/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.tedneward.lolcode

import org.antlr.v4.runtime.*
import org.antlr.v4.runtime.tree.ParseTree
import org.antlr.v4.runtime.tree.ParseTreeWalker

// ====================================
// Abstract Syntax Tree
open class ASTNode(val children: List<ASTNode> = mutableListOf()) { 
    override fun toString() : String {
        val mappedChildren = children.map { "(" + it.toString() + ")" }
        return "(${mappedChildren})"
    }
}
class CodeBlock() : ASTNode() { }
class Program(var version: String = "", var codeBlock: CodeBlock = CodeBlock()) : ASTNode() { 
    override fun toString() : String {
        return "(program version:${version} codeBlock:${codeBlock})"
    }
}

class ASTBuilder() : lolcodeBaseListener() {
    val program = Program()

    override fun enterProgram(ctx : lolcodeParser.ProgramContext ) { 
        program.version = if (ctx.opening().version() != null) ctx.opening().version().getText() else "1.2";
    }
}

// ====================================
// Interpreter
class Interpreter {
    var program : Program = Program()

    fun version() : String { return "0.1" }

    fun run(program : Program) {
        this.program = program
    }
    fun execute(code : String) {
        val lexer = lolcodeLexer(CharStreams.fromString(code))
        val tokens = CommonTokenStream(lexer)
        val parser = lolcodeParser(tokens)
        val builder = ASTBuilder()
        ParseTreeWalker.DEFAULT.walk(builder, parser.program())
        System.out.println("AST: ${builder.program}")
        return run(builder.program)
    }
}
