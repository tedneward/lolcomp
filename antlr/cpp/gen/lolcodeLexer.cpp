
// Generated from ../lolcode.g4 by ANTLR 4.13.1


#include "lolcodeLexer.h"


using namespace antlr4;

using namespace LOLCODE;


using namespace antlr4;

namespace {

struct LolcodeLexerStaticData final {
  LolcodeLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  LolcodeLexerStaticData(const LolcodeLexerStaticData&) = delete;
  LolcodeLexerStaticData(LolcodeLexerStaticData&&) = delete;
  LolcodeLexerStaticData& operator=(const LolcodeLexerStaticData&) = delete;
  LolcodeLexerStaticData& operator=(LolcodeLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag lolcodelexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
LolcodeLexerStaticData *lolcodelexerLexerStaticData = nullptr;

void lolcodelexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (lolcodelexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(lolcodelexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<LolcodeLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "ATOM", "LABEL", "STRING", 
      "NEWLINE", "WS", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'HAI'", "'1.0'", "'1.1'", "'1.2'", "'KTHXBYE'", "'I HAS A'", 
      "'ITZ'", "'VISIBLE'", "'MKAY\\u003F'", "'GIMMEH'", "'R'", "'IM IN YR'", 
      "'WILE'", "'IM OUTTA YR'", "', O RLY\\u003F'", "'YA RLY'", "'OIC'", 
      "'NO WAI'", "'MEBBE'", "'HOW DUZ I'", "'YR'", "'AN YR'", "'IF U SAY SO'", 
      "'PRODUKT OF'", "'QUOSHUNT OF'", "'MOD OF'", "'AN'", "'SUM OF'", "'DIFF OF'", 
      "'BOTH SAEM'", "'DIFFRINT'", "'BIGGR OF'", "'SMALLR OF'", "'ALL OF'", 
      "'ANY OF'", "'BOTH OF'", "'EITHER OF'", "'NOT'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "ATOM", "LABEL", "STRING", "NEWLINE", "WS", "SINGLE_LINE_COMMENT", 
      "MULTI_LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,45,477,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
  	1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
  	5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
  	1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
  	1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,
  	1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,
  	1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,
  	1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,4,38,375,8,38,
  	11,38,12,38,376,1,38,5,38,380,8,38,10,38,12,38,383,9,38,1,38,1,38,5,38,
  	387,8,38,10,38,12,38,390,9,38,1,38,1,38,4,38,394,8,38,11,38,12,38,395,
  	1,38,1,38,5,38,400,8,38,10,38,12,38,403,9,38,1,38,1,38,5,38,407,8,38,
  	10,38,12,38,410,9,38,1,38,3,38,413,8,38,1,39,1,39,5,39,417,8,39,10,39,
  	12,39,420,9,39,1,40,1,40,1,40,1,40,5,40,426,8,40,10,40,12,40,429,9,40,
  	1,40,1,40,1,41,3,41,434,8,41,1,41,1,41,4,41,438,8,41,11,41,12,41,439,
  	1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,5,43,453,8,43,
  	10,43,12,43,456,9,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,5,44,466,
  	8,44,10,44,12,44,469,9,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,467,0,
  	45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
  	14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
  	51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
  	37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,1,0,5,2,0,65,90,97,
  	122,4,0,48,57,65,90,95,95,97,122,1,0,34,34,2,0,10,10,13,13,2,0,9,9,32,
  	32,497,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
  	11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
  	0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
  	0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
  	43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
  	0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
  	0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
  	75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
  	0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,95,1,0,0,0,5,99,1,0,0,
  	0,7,103,1,0,0,0,9,107,1,0,0,0,11,115,1,0,0,0,13,123,1,0,0,0,15,127,1,
  	0,0,0,17,135,1,0,0,0,19,141,1,0,0,0,21,148,1,0,0,0,23,150,1,0,0,0,25,
  	159,1,0,0,0,27,164,1,0,0,0,29,176,1,0,0,0,31,185,1,0,0,0,33,192,1,0,0,
  	0,35,196,1,0,0,0,37,203,1,0,0,0,39,209,1,0,0,0,41,219,1,0,0,0,43,222,
  	1,0,0,0,45,228,1,0,0,0,47,240,1,0,0,0,49,251,1,0,0,0,51,263,1,0,0,0,53,
  	270,1,0,0,0,55,273,1,0,0,0,57,280,1,0,0,0,59,288,1,0,0,0,61,298,1,0,0,
  	0,63,307,1,0,0,0,65,316,1,0,0,0,67,326,1,0,0,0,69,333,1,0,0,0,71,340,
  	1,0,0,0,73,348,1,0,0,0,75,358,1,0,0,0,77,412,1,0,0,0,79,414,1,0,0,0,81,
  	421,1,0,0,0,83,437,1,0,0,0,85,443,1,0,0,0,87,447,1,0,0,0,89,459,1,0,0,
  	0,91,92,5,72,0,0,92,93,5,65,0,0,93,94,5,73,0,0,94,2,1,0,0,0,95,96,5,49,
  	0,0,96,97,5,46,0,0,97,98,5,48,0,0,98,4,1,0,0,0,99,100,5,49,0,0,100,101,
  	5,46,0,0,101,102,5,49,0,0,102,6,1,0,0,0,103,104,5,49,0,0,104,105,5,46,
  	0,0,105,106,5,50,0,0,106,8,1,0,0,0,107,108,5,75,0,0,108,109,5,84,0,0,
  	109,110,5,72,0,0,110,111,5,88,0,0,111,112,5,66,0,0,112,113,5,89,0,0,113,
  	114,5,69,0,0,114,10,1,0,0,0,115,116,5,73,0,0,116,117,5,32,0,0,117,118,
  	5,72,0,0,118,119,5,65,0,0,119,120,5,83,0,0,120,121,5,32,0,0,121,122,5,
  	65,0,0,122,12,1,0,0,0,123,124,5,73,0,0,124,125,5,84,0,0,125,126,5,90,
  	0,0,126,14,1,0,0,0,127,128,5,86,0,0,128,129,5,73,0,0,129,130,5,83,0,0,
  	130,131,5,73,0,0,131,132,5,66,0,0,132,133,5,76,0,0,133,134,5,69,0,0,134,
  	16,1,0,0,0,135,136,5,77,0,0,136,137,5,75,0,0,137,138,5,65,0,0,138,139,
  	5,89,0,0,139,140,5,63,0,0,140,18,1,0,0,0,141,142,5,71,0,0,142,143,5,73,
  	0,0,143,144,5,77,0,0,144,145,5,77,0,0,145,146,5,69,0,0,146,147,5,72,0,
  	0,147,20,1,0,0,0,148,149,5,82,0,0,149,22,1,0,0,0,150,151,5,73,0,0,151,
  	152,5,77,0,0,152,153,5,32,0,0,153,154,5,73,0,0,154,155,5,78,0,0,155,156,
  	5,32,0,0,156,157,5,89,0,0,157,158,5,82,0,0,158,24,1,0,0,0,159,160,5,87,
  	0,0,160,161,5,73,0,0,161,162,5,76,0,0,162,163,5,69,0,0,163,26,1,0,0,0,
  	164,165,5,73,0,0,165,166,5,77,0,0,166,167,5,32,0,0,167,168,5,79,0,0,168,
  	169,5,85,0,0,169,170,5,84,0,0,170,171,5,84,0,0,171,172,5,65,0,0,172,173,
  	5,32,0,0,173,174,5,89,0,0,174,175,5,82,0,0,175,28,1,0,0,0,176,177,5,44,
  	0,0,177,178,5,32,0,0,178,179,5,79,0,0,179,180,5,32,0,0,180,181,5,82,0,
  	0,181,182,5,76,0,0,182,183,5,89,0,0,183,184,5,63,0,0,184,30,1,0,0,0,185,
  	186,5,89,0,0,186,187,5,65,0,0,187,188,5,32,0,0,188,189,5,82,0,0,189,190,
  	5,76,0,0,190,191,5,89,0,0,191,32,1,0,0,0,192,193,5,79,0,0,193,194,5,73,
  	0,0,194,195,5,67,0,0,195,34,1,0,0,0,196,197,5,78,0,0,197,198,5,79,0,0,
  	198,199,5,32,0,0,199,200,5,87,0,0,200,201,5,65,0,0,201,202,5,73,0,0,202,
  	36,1,0,0,0,203,204,5,77,0,0,204,205,5,69,0,0,205,206,5,66,0,0,206,207,
  	5,66,0,0,207,208,5,69,0,0,208,38,1,0,0,0,209,210,5,72,0,0,210,211,5,79,
  	0,0,211,212,5,87,0,0,212,213,5,32,0,0,213,214,5,68,0,0,214,215,5,85,0,
  	0,215,216,5,90,0,0,216,217,5,32,0,0,217,218,5,73,0,0,218,40,1,0,0,0,219,
  	220,5,89,0,0,220,221,5,82,0,0,221,42,1,0,0,0,222,223,5,65,0,0,223,224,
  	5,78,0,0,224,225,5,32,0,0,225,226,5,89,0,0,226,227,5,82,0,0,227,44,1,
  	0,0,0,228,229,5,73,0,0,229,230,5,70,0,0,230,231,5,32,0,0,231,232,5,85,
  	0,0,232,233,5,32,0,0,233,234,5,83,0,0,234,235,5,65,0,0,235,236,5,89,0,
  	0,236,237,5,32,0,0,237,238,5,83,0,0,238,239,5,79,0,0,239,46,1,0,0,0,240,
  	241,5,80,0,0,241,242,5,82,0,0,242,243,5,79,0,0,243,244,5,68,0,0,244,245,
  	5,85,0,0,245,246,5,75,0,0,246,247,5,84,0,0,247,248,5,32,0,0,248,249,5,
  	79,0,0,249,250,5,70,0,0,250,48,1,0,0,0,251,252,5,81,0,0,252,253,5,85,
  	0,0,253,254,5,79,0,0,254,255,5,83,0,0,255,256,5,72,0,0,256,257,5,85,0,
  	0,257,258,5,78,0,0,258,259,5,84,0,0,259,260,5,32,0,0,260,261,5,79,0,0,
  	261,262,5,70,0,0,262,50,1,0,0,0,263,264,5,77,0,0,264,265,5,79,0,0,265,
  	266,5,68,0,0,266,267,5,32,0,0,267,268,5,79,0,0,268,269,5,70,0,0,269,52,
  	1,0,0,0,270,271,5,65,0,0,271,272,5,78,0,0,272,54,1,0,0,0,273,274,5,83,
  	0,0,274,275,5,85,0,0,275,276,5,77,0,0,276,277,5,32,0,0,277,278,5,79,0,
  	0,278,279,5,70,0,0,279,56,1,0,0,0,280,281,5,68,0,0,281,282,5,73,0,0,282,
  	283,5,70,0,0,283,284,5,70,0,0,284,285,5,32,0,0,285,286,5,79,0,0,286,287,
  	5,70,0,0,287,58,1,0,0,0,288,289,5,66,0,0,289,290,5,79,0,0,290,291,5,84,
  	0,0,291,292,5,72,0,0,292,293,5,32,0,0,293,294,5,83,0,0,294,295,5,65,0,
  	0,295,296,5,69,0,0,296,297,5,77,0,0,297,60,1,0,0,0,298,299,5,68,0,0,299,
  	300,5,73,0,0,300,301,5,70,0,0,301,302,5,70,0,0,302,303,5,82,0,0,303,304,
  	5,73,0,0,304,305,5,78,0,0,305,306,5,84,0,0,306,62,1,0,0,0,307,308,5,66,
  	0,0,308,309,5,73,0,0,309,310,5,71,0,0,310,311,5,71,0,0,311,312,5,82,0,
  	0,312,313,5,32,0,0,313,314,5,79,0,0,314,315,5,70,0,0,315,64,1,0,0,0,316,
  	317,5,83,0,0,317,318,5,77,0,0,318,319,5,65,0,0,319,320,5,76,0,0,320,321,
  	5,76,0,0,321,322,5,82,0,0,322,323,5,32,0,0,323,324,5,79,0,0,324,325,5,
  	70,0,0,325,66,1,0,0,0,326,327,5,65,0,0,327,328,5,76,0,0,328,329,5,76,
  	0,0,329,330,5,32,0,0,330,331,5,79,0,0,331,332,5,70,0,0,332,68,1,0,0,0,
  	333,334,5,65,0,0,334,335,5,78,0,0,335,336,5,89,0,0,336,337,5,32,0,0,337,
  	338,5,79,0,0,338,339,5,70,0,0,339,70,1,0,0,0,340,341,5,66,0,0,341,342,
  	5,79,0,0,342,343,5,84,0,0,343,344,5,72,0,0,344,345,5,32,0,0,345,346,5,
  	79,0,0,346,347,5,70,0,0,347,72,1,0,0,0,348,349,5,69,0,0,349,350,5,73,
  	0,0,350,351,5,84,0,0,351,352,5,72,0,0,352,353,5,69,0,0,353,354,5,82,0,
  	0,354,355,5,32,0,0,355,356,5,79,0,0,356,357,5,70,0,0,357,74,1,0,0,0,358,
  	359,5,78,0,0,359,360,5,79,0,0,360,361,5,84,0,0,361,76,1,0,0,0,362,363,
  	5,87,0,0,363,364,5,73,0,0,364,413,5,78,0,0,365,366,5,70,0,0,366,367,5,
  	65,0,0,367,368,5,73,0,0,368,413,5,76,0,0,369,370,5,78,0,0,370,371,5,79,
  	0,0,371,372,5,79,0,0,372,413,5,66,0,0,373,375,2,48,57,0,374,373,1,0,0,
  	0,375,376,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,413,1,0,0,0,378,
  	380,2,48,57,0,379,378,1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,
  	1,0,0,0,382,384,1,0,0,0,383,381,1,0,0,0,384,388,5,46,0,0,385,387,2,48,
  	57,0,386,385,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,
  	389,413,1,0,0,0,390,388,1,0,0,0,391,393,5,45,0,0,392,394,2,48,57,0,393,
  	392,1,0,0,0,394,395,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,413,1,
  	0,0,0,397,401,5,45,0,0,398,400,2,48,57,0,399,398,1,0,0,0,400,403,1,0,
  	0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,401,1,0,0,0,404,
  	408,5,46,0,0,405,407,2,48,57,0,406,405,1,0,0,0,407,410,1,0,0,0,408,406,
  	1,0,0,0,408,409,1,0,0,0,409,413,1,0,0,0,410,408,1,0,0,0,411,413,3,81,
  	40,0,412,362,1,0,0,0,412,365,1,0,0,0,412,369,1,0,0,0,412,374,1,0,0,0,
  	412,381,1,0,0,0,412,391,1,0,0,0,412,397,1,0,0,0,412,411,1,0,0,0,413,78,
  	1,0,0,0,414,418,7,0,0,0,415,417,7,1,0,0,416,415,1,0,0,0,417,420,1,0,0,
  	0,418,416,1,0,0,0,418,419,1,0,0,0,419,80,1,0,0,0,420,418,1,0,0,0,421,
  	427,5,34,0,0,422,423,5,39,0,0,423,426,5,34,0,0,424,426,8,2,0,0,425,422,
  	1,0,0,0,425,424,1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,
  	0,428,430,1,0,0,0,429,427,1,0,0,0,430,431,5,34,0,0,431,82,1,0,0,0,432,
  	434,5,13,0,0,433,432,1,0,0,0,433,434,1,0,0,0,434,435,1,0,0,0,435,438,
  	5,10,0,0,436,438,7,3,0,0,437,433,1,0,0,0,437,436,1,0,0,0,438,439,1,0,
  	0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,442,6,41,0,0,
  	442,84,1,0,0,0,443,444,7,4,0,0,444,445,1,0,0,0,445,446,6,42,0,0,446,86,
  	1,0,0,0,447,448,5,66,0,0,448,449,5,84,0,0,449,450,5,87,0,0,450,454,1,
  	0,0,0,451,453,8,3,0,0,452,451,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,
  	454,455,1,0,0,0,455,457,1,0,0,0,456,454,1,0,0,0,457,458,6,43,0,0,458,
  	88,1,0,0,0,459,460,5,79,0,0,460,461,5,66,0,0,461,462,5,84,0,0,462,463,
  	5,87,0,0,463,467,1,0,0,0,464,466,9,0,0,0,465,464,1,0,0,0,466,469,1,0,
  	0,0,467,468,1,0,0,0,467,465,1,0,0,0,468,470,1,0,0,0,469,467,1,0,0,0,470,
  	471,5,84,0,0,471,472,5,76,0,0,472,473,5,68,0,0,473,474,5,82,0,0,474,475,
  	1,0,0,0,475,476,6,44,0,0,476,90,1,0,0,0,16,0,376,381,388,395,401,408,
  	412,418,425,427,433,437,439,454,467,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  lolcodelexerLexerStaticData = staticData.release();
}

}

lolcodeLexer::lolcodeLexer(CharStream *input) : Lexer(input) {
  lolcodeLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *lolcodelexerLexerStaticData->atn, lolcodelexerLexerStaticData->decisionToDFA, lolcodelexerLexerStaticData->sharedContextCache);
}

lolcodeLexer::~lolcodeLexer() {
  delete _interpreter;
}

std::string lolcodeLexer::getGrammarFileName() const {
  return "lolcode.g4";
}

const std::vector<std::string>& lolcodeLexer::getRuleNames() const {
  return lolcodelexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& lolcodeLexer::getChannelNames() const {
  return lolcodelexerLexerStaticData->channelNames;
}

const std::vector<std::string>& lolcodeLexer::getModeNames() const {
  return lolcodelexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& lolcodeLexer::getVocabulary() const {
  return lolcodelexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView lolcodeLexer::getSerializedATN() const {
  return lolcodelexerLexerStaticData->serializedATN;
}

const atn::ATN& lolcodeLexer::getATN() const {
  return *lolcodelexerLexerStaticData->atn;
}




void lolcodeLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  lolcodelexerLexerInitialize();
#else
  ::antlr4::internal::call_once(lolcodelexerLexerOnceFlag, lolcodelexerLexerInitialize);
#endif
}
